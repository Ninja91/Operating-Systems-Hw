!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CFG_READ_OPCODE	early_imr.c	23;"	d	file:
CFG_WRITE_OPCODE	early_imr.c	24;"	d	file:
DRAM_IMR0H	early_imr.c	26;"	d	file:
DRAM_IMR0L	early_imr.c	25;"	d	file:
DRAM_IMR0RM	early_imr.c	27;"	d	file:
DRAM_IMR0WM	early_imr.c	28;"	d	file:
DRAM_IMR1H	early_imr.c	30;"	d	file:
DRAM_IMR1L	early_imr.c	29;"	d	file:
DRAM_IMR1RM	early_imr.c	31;"	d	file:
DRAM_IMR1WM	early_imr.c	32;"	d	file:
DRAM_IMR3H	early_imr.c	34;"	d	file:
DRAM_IMR3L	early_imr.c	33;"	d	file:
DRAM_IMR3RM	early_imr.c	35;"	d	file:
DRAM_IMR3WM	early_imr.c	36;"	d	file:
DRAM_IMR7H	early_imr.c	38;"	d	file:
DRAM_IMR7L	early_imr.c	37;"	d	file:
DRAM_IMR7RM	early_imr.c	39;"	d	file:
DRAM_IMR7WM	early_imr.c	40;"	d	file:
Date	ascdate.c	/^struct dateinfo Date = {0, FALSE, DATE_DST_AUTO,$/;"	v	typeref:struct:dateinfo
Defer	resched.c	/^struct	defer	Defer;$/;"	v	typeref:struct:defer
EOI	evec.c	34;"	d	file:
FLAGS_GRANULARITY	meminit.c	34;"	d	file:
FLAGS_SETTINGS	meminit.c	36;"	d	file:
FLAGS_SIZE	meminit.c	35;"	d	file:
GDT_BYTES	start.S	/^#define	GDT_BYTES		(GDT_ENTRIES * GDT_ENTRY_SIZE)$/;"	d
GDT_ENTRIES	start.S	/^#define	GDT_ENTRIES		8$/;"	d
GDT_ENTRY_SIZE	start.S	/^#define	GDT_ENTRY_SIZE		8$/;"	d
ICU1	evec.c	28;"	d	file:
ICU2	evec.c	29;"	d	file:
IDT_BYTES	start.S	/^#define	IDT_BYTES		(IDT_ENTRIES * IDT_ENTRY_SIZE)$/;"	d
IDT_ENTRIES	start.S	/^#define	IDT_ENTRIES		256$/;"	d
IDT_ENTRY_SIZE	start.S	/^#define	IDT_ENTRY_SIZE		8$/;"	d
IGDT_TRAPG	evec.c	37;"	d	file:
IMR	evec.c	32;"	d	file:
IMR1	evec.c	25;"	d	file:
IMR2	evec.c	26;"	d	file:
IMR_BASE_ADDR	early_imr.c	44;"	d	file:
IMR_LOCK_BIT	early_imr.c	45;"	d	file:
IMR_MASK	early_imr.c	48;"	d	file:
IMR_NON_SMM_ENABLE	early_imr.c	52;"	d	file:
IMR_READ_ENABLE_ALL	early_imr.c	43;"	d	file:
IMR_SNOOP_NON_SMM_ENABLE	early_imr.c	50;"	d	file:
IMR_WRITE_ENABLE_ALL	early_imr.c	42;"	d	file:
INTEL_CLN_SB_BYTEEN	early_imr.c	20;"	d	file:
INTEL_CLN_SB_CMD_ADDR	early_imr.c	14;"	d	file:
INTEL_CLN_SB_DATA_ADDR	early_imr.c	15;"	d	file:
INTEL_CLN_SB_MCR_SHIFT	early_imr.c	17;"	d	file:
INTEL_CLN_SB_PORT_SHIFT	early_imr.c	18;"	d	file:
INTEL_CLN_SB_REG_SHIFT	early_imr.c	19;"	d	file:
L1	start.S	/^L1:$/;"	l
MAXSECONDS	sleep.c	5;"	d	file:
MMCONFIG_BASE	pci.c	17;"	d	file:
MMCONFIG_LEN	pci.c	18;"	d	file:
MULTIBOOT_BOOTINFO_MMAP	start.S	/^#define MULTIBOOT_BOOTINFO_MMAP	0x00000040	\/* mmap_length mmap_addr valid		*\/$/;"	d
MULTIBOOT_HEADER_FLAGS	start.S	/^#define	MULTIBOOT_HEADER_FLAGS  0x00010003$/;"	d
MULTIBOOT_HEADER_MAGIC	start.S	/^#define	MULTIBOOT_HEADER_MAGIC  0x1BADB002$/;"	d
MULTIBOOT_SIGNATURE	start.S	/^#define MULTIBOOT_SIGNATURE	0x2BADB002	\/* Multiboot signature verification	*\/$/;"	d
NGD	meminit.c	33;"	d	file:
NID	evec.c	36;"	d	file:
NULLSTK	start.S	/^#define NULLSTK			(8192)		\/* This must match NULLSTK defined in kernel.h 		*\/$/;"	d
OCR	evec.c	31;"	d	file:
PCI_DEVICE_ID_CLANTON_SB	early_imr.c	113;"	d	file:
PCI_VENDOR_ID_INTEL	early_imr.c	112;"	d	file:
QUARK_CONS_BAR_INDEX	kprintf.c	12;"	d	file:
QUARK_CONS_PORT	kprintf.c	11;"	d	file:
SB_ID_ESRAM	early_imr.c	/^	SB_ID_ESRAM = 0x05,$/;"	e	enum:__anon1	file:
SB_ID_HUNIT	early_imr.c	/^	SB_ID_HUNIT = 0x03,$/;"	e	enum:__anon1	file:
SB_ID_THERMAL	early_imr.c	/^	SB_ID_THERMAL = 0x04,$/;"	e	enum:__anon1	file:
STKDETAIL	stacktrace.c	6;"	d	file:
Xtrap	intr.S	/^Xtrap:$/;"	l
_Xint0	intr.S	/^_Xint0:$/;"	l
_Xint1	intr.S	/^_Xint1:$/;"	l
_Xint10	intr.S	/^_Xint10:$/;"	l
_Xint11	intr.S	/^_Xint11:$/;"	l
_Xint12	intr.S	/^_Xint12:$/;"	l
_Xint13	intr.S	/^_Xint13:$/;"	l
_Xint14	intr.S	/^_Xint14:$/;"	l
_Xint15	intr.S	/^_Xint15:$/;"	l
_Xint16	intr.S	/^_Xint16:$/;"	l
_Xint17	intr.S	/^_Xint17:$/;"	l
_Xint18	intr.S	/^_Xint18:$/;"	l
_Xint19	intr.S	/^_Xint19:$/;"	l
_Xint2	intr.S	/^_Xint2:$/;"	l
_Xint20	intr.S	/^_Xint20:$/;"	l
_Xint21	intr.S	/^_Xint21:$/;"	l
_Xint22	intr.S	/^_Xint22:$/;"	l
_Xint23	intr.S	/^_Xint23:$/;"	l
_Xint24	intr.S	/^_Xint24:$/;"	l
_Xint25	intr.S	/^_Xint25:$/;"	l
_Xint26	intr.S	/^_Xint26:$/;"	l
_Xint27	intr.S	/^_Xint27:$/;"	l
_Xint28	intr.S	/^_Xint28:$/;"	l
_Xint29	intr.S	/^_Xint29:$/;"	l
_Xint3	intr.S	/^_Xint3:$/;"	l
_Xint30	intr.S	/^_Xint30:$/;"	l
_Xint31	intr.S	/^_Xint31:$/;"	l
_Xint32	intr.S	/^_Xint32:$/;"	l
_Xint33	intr.S	/^_Xint33:$/;"	l
_Xint34	intr.S	/^_Xint34:$/;"	l
_Xint35	intr.S	/^_Xint35:$/;"	l
_Xint36	intr.S	/^_Xint36:$/;"	l
_Xint37	intr.S	/^_Xint37:$/;"	l
_Xint38	intr.S	/^_Xint38:$/;"	l
_Xint39	intr.S	/^_Xint39:$/;"	l
_Xint4	intr.S	/^_Xint4:$/;"	l
_Xint40	intr.S	/^_Xint40:$/;"	l
_Xint41	intr.S	/^_Xint41:$/;"	l
_Xint42	intr.S	/^_Xint42:$/;"	l
_Xint43	intr.S	/^_Xint43:$/;"	l
_Xint44	intr.S	/^_Xint44:$/;"	l
_Xint45	intr.S	/^_Xint45:$/;"	l
_Xint46	intr.S	/^_Xint46:$/;"	l
_Xint5	intr.S	/^_Xint5:$/;"	l
_Xint6	intr.S	/^_Xint6:$/;"	l
_Xint7	intr.S	/^_Xint7:$/;"	l
_Xint8	intr.S	/^_Xint8:$/;"	l
_Xint9	intr.S	/^_Xint9:$/;"	l
___divsi3	start.S	/^___divsi3:$/;"	l
___udivsi3	start.S	/^___udivsi3:$/;"	l
_ptclear	ptclear.c	/^void	_ptclear($/;"	f
_rtcin	start.S	/^_rtcin:	movl	4(%esp), %eax$/;"	l
app1	app1.c	/^void app1(){$/;"	f
app2	app2.c	/^void app2(){$/;"	f
app3	app3.c	/^void app3(){$/;"	f
ascdate	ascdate.c	/^status	ascdate ($/;"	f
bcopy	start.S	/^bcopy:$/;"	l
bootinfo	meminit.c	/^struct	mbootinfo *bootinfo = (struct mbootinfo *)1;	$/;"	v	typeref:struct:mbootinfo
bootsign	meminit.c	/^uint32	bootsign = 1;		\/* Boot signature of the boot loader	*\/$/;"	v
bufinit	bufinit.c	/^status	bufinit(void)$/;"	f
buftab	bufinit.c	/^struct	bpentry	buftab[NBPOOLS];		\/* Buffer pool table		*\/$/;"	v	typeref:struct:bpentry
chprio	chprio.c	/^pri16	chprio($/;"	f
clkdisp	clkdisp.S	/^clkdisp:$/;"	l
clkhandler	clkhandler.c	/^void	clkhandler()$/;"	f
clkinit	clkinit.c	/^void	clkinit(void)$/;"	f
clktime	clkinit.c	/^uint32	clktime;		\/* Seconds since boot			*\/$/;"	v
cln_remove_imr	early_imr.c	/^static void cln_remove_imr(unsigned char reg_l, unsigned char reg_h, unsigned char reg_rm, unsigned char reg_wm)$/;"	f	file:
cln_remove_imr_boot_params	early_imr.c	/^static void cln_remove_imr_boot_params(void)$/;"	f	file:
cln_remove_imr_bzimage	early_imr.c	/^static void cln_remove_imr_bzimage(void)$/;"	f	file:
cln_remove_imr_grub	early_imr.c	/^static void cln_remove_imr_grub(void)$/;"	f	file:
cln_sb_id	early_imr.c	/^}cln_sb_id;$/;"	t	typeref:enum:__anon1	file:
close	close.c	/^syscall	close($/;"	f
console_init	kprintf.c	/^int console_init(void)$/;"	f
control	control.c	/^syscall	control($/;"	f
cpudelay	start.S	/^cpudelay:	.long	1$/;"	l
create	create.c	/^pid32	create($/;"	f
ctr1000	clkinit.c	/^uint32	ctr1000 = 0;		\/* Milliseconds since boot		*\/$/;"	v
ctxsw	ctxsw.S	/^ctxsw:$/;"	l
currpid	initialize.c	/^pid32	currpid;		\/* ID of currently executing process	*\/$/;"	v
defevec	intr.S	/^defevec:$/;"	l
delay	initialize.c	/^int32	delay(int n)$/;"	f
dequeue	queue.c	/^pid32	dequeue($/;"	f
devtab	conf.c	/^struct	dentry	devtab[NDEVS] =$/;"	v	typeref:struct:dentry
disable	intr.S	/^disable:$/;"	l
ebp	stacktrace.c	/^static unsigned long	*ebp;$/;"	v	file:
enable	intr.S	/^enable:$/;"	l
encodePCIDevice	pci.c	/^encodePCIDevice(unsigned int bus, unsigned int dev, unsigned int func)$/;"	f	file:
encodedPCIDevToBus	pci.c	/^encodedPCIDevToBus(unsigned int encodedDev)$/;"	f	file:
encodedPCIDevToDevice	pci.c	/^encodedPCIDevToDevice(unsigned int encodedDev)$/;"	f	file:
encodedPCIDevToFunction	pci.c	/^encodedPCIDevToFunction(unsigned int encodedDev)$/;"	f	file:
enqueue	queue.c	/^pid32	enqueue($/;"	f
esp	stacktrace.c	/^static unsigned long	*esp;$/;"	v	file:
find_pci_device	pci.c	/^int find_pci_device(int32 deviceID, int32 vendorID, int32 index)$/;"	f
freebuf	freebuf.c	/^syscall	freebuf($/;"	f
freemem	freemem.c	/^syscall	freemem($/;"	f
gdt	start.S	/^gdt:	.space	GDT_BYTES$/;"	l
gdt1	start.S	/^gdt1:$/;"	l
gdt_copy	meminit.c	/^struct sd gdt_copy[NGD] = {$/;"	v	typeref:struct:sd
gdtr	start.S	/^gdtr:	.word	(GDT_BYTES-1)		# sizeof _gdt -1 (in bytes)$/;"	l
get_quark_pdat_entry_data_by_desc	quark_pdat.c	/^int get_quark_pdat_entry_data_by_desc(const char* entry_desc, char* buf, uint32 size)$/;"	f
get_quark_pdat_entry_data_by_id	quark_pdat.c	/^int get_quark_pdat_entry_data_by_id(uint16 type_id, char* buf, uint32 size)$/;"	f
getbuf	getbuf.c	/^char    *getbuf($/;"	f
getc	getc.c	/^syscall	getc($/;"	f
getdev	getdev.c	/^did32	getdev($/;"	f
getfirst	getitem.c	/^pid32	getfirst($/;"	f
getitem	getitem.c	/^pid32	getitem($/;"	f
getlast	getitem.c	/^pid32	getlast($/;"	f
getmem	getmem.c	/^char  	*getmem($/;"	f
getpid	getpid.c	/^pid32	getpid(void)$/;"	f
getppid	getppid.c	/^pid32	getppid(void)$/;"	f
getprio	getprio.c	/^syscall	getprio($/;"	f
getstk	getstk.c	/^char  	*getstk($/;"	f
gettime	gettime.c	/^status	gettime($/;"	f
getutime	getutime.c	/^status	getutime($/;"	f
girmask	evec.c	/^uint16	girmask;$/;"	v
halt	intr.S	/^halt:$/;"	l
hexdump	debug.c	/^void	hexdump($/;"	f
hexdump_print	debug.c	/^static void hexdump_print($/;"	f	file:
host2netla	host2netla.S	/^host2netla:$/;"	l
host2netlb	host2netlb.c	/^long host2netlb( long x){$/;"	f
host2netlc	host2netlc.c	/^long host2netlc(long x){$/;"	f
idt	evec.c	/^struct __attribute__ ((__packed__)) idt {$/;"	s	file:
idt	start.S	/^idt:	.space	IDT_BYTES       	$/;"	l
idtr	start.S	/^idtr:	.word	(IDT_BYTES-1)		# size of _idt -1 (in bytes)$/;"	l
igd_dpl	evec.c	/^	unsigned int	igd_dpl : 2;$/;"	m	struct:idt	file:
igd_hoffset	evec.c	/^	unsigned short	igd_hoffset;$/;"	m	struct:idt	file:
igd_loffset	evec.c	/^	unsigned short	igd_loffset;$/;"	m	struct:idt	file:
igd_mbz	evec.c	/^	unsigned int	igd_mbz : 3;$/;"	m	struct:idt	file:
igd_present	evec.c	/^	unsigned int	igd_present : 1;$/;"	m	struct:idt	file:
igd_rsvd	evec.c	/^	unsigned int	igd_rsvd : 5;$/;"	m	struct:idt	file:
igd_segsel	evec.c	/^	unsigned short	igd_segsel;$/;"	m	struct:idt	file:
igd_type	evec.c	/^	unsigned int	igd_type : 5;$/;"	m	struct:idt	file:
inames	evec.c	/^char *inames[] = {$/;"	v
inb	start.S	/^inb:	movl	4(%esp), %edx$/;"	l
init	init.c	/^syscall	init($/;"	f
initevec	evec.c	/^int32	initevec()$/;"	f
inl	start.S	/^inl:	movl	4(%esp), %edx$/;"	l
insert	insert.c	/^status	insert($/;"	f
insertd	insertd.c	/^status	insertd(			\/* Assumes interrupts disabled	*\/$/;"	f
insw	start.S	/^insw:$/;"	l
intel_cln_early_sb_probe	early_imr.c	/^static int intel_cln_early_sb_probe(void)$/;"	f	file:
intel_cln_early_sb_read_reg	early_imr.c	/^void intel_cln_early_sb_read_reg(cln_sb_id id, unsigned char cmd, unsigned char reg, uint32 *data)$/;"	f
intel_cln_early_sb_write_reg	early_imr.c	/^void intel_cln_early_sb_write_reg(cln_sb_id id, unsigned char cmd, unsigned char reg, uint32 data)$/;"	f
inw	start.S	/^inw:	movl	4(%esp), %edx$/;"	l
ioerr	ioerr.c	/^devcall	ioerr(void)$/;"	f
ionull	ionull.c	/^devcall	ionull(void)$/;"	f
kgetc	kprintf.c	/^syscall kgetc(void)$/;"	f
kill	kill.c	/^syscall	kill($/;"	f
kprintf	kprintf.c	/^syscall kprintf(char *fmt, ...)$/;"	f
kputc	kprintf.c	/^syscall kputc(byte c)	\/* Character to write	*\/$/;"	f
lidt	start.S	/^lidt:$/;"	l
main	main.c	/^process	main(void)$/;"	f
mark	mark.c	/^status	mark($/;"	f
markinit	mark.c	/^void	markinit(void)$/;"	f
marks	mark.c	/^int32	*marks[MAXMARK];		\/* Pointers to marked locations	*\/$/;"	v
maxheap	meminit.c	/^void	*maxheap;		\/* Highest valid heap address		*\/$/;"	v
mbootheader	start.S	/^mbootheader:  				# Beginning of multiboot header, embedded in ELF header$/;"	l
meminit	meminit.c	/^void	meminit(void) {$/;"	f
memlist	initialize.c	/^struct	memblk	memlist;	\/* List of free memory blocks		*\/$/;"	v	typeref:struct:memblk
minheap	meminit.c	/^void	*minheap;		\/* Start of heap			*\/$/;"	v
mkbufpool	mkbufpool.c	/^bpid32	mkbufpool($/;"	f
mkmutex	mark.c	/^sid32	mkmutex;			\/* Mutual exclusion semaphore	*\/$/;"	v
mmap_search_done	start.S	/^mmap_search_done:$/;"	l
mmap_search_next_sgmt	start.S	/^mmap_search_next_sgmt:$/;"	l
mmap_search_no_overlap	start.S	/^mmap_search_no_overlap:$/;"	l
mmap_search_start	start.S	/^mmap_search_start:$/;"	l
mywelcomemsg	mywelcomemsg.c	/^void mywelcomemsg(void){$/;"	f
nbpools	bufinit.c	/^bpid32	nbpools;$/;"	v
newpid	create.c	/^local	pid32	newpid(void)$/;"	f
newqueue	newqueue.c	/^qid16	newqueue(void)$/;"	f
newsem	semcreate.c	/^local	sid32	newsem(void)$/;"	f
nmarks	mark.c	/^int32	nmarks;				\/* Number of marked locations	*\/$/;"	v
nulluser	initialize.c	/^void	nulluser()$/;"	f
open	open.c	/^syscall	open($/;"	f
outb	start.S	/^outb:	movl	4(%esp), %edx$/;"	l
outl	start.S	/^outl:	movl	4(%esp), %edx$/;"	l
outsw	start.S	/^outsw:$/;"	l
outw	start.S	/^outw:	movl	4(%esp), %edx$/;"	l
panic	panic.c	/^void	panic ($/;"	f
pause	intr.S	/^pause:$/;"	l
pci_get_dev_mmio_base_addr	pci.c	/^int pci_get_dev_mmio_base_addr(uint32 encodedDev, int barIndex,$/;"	f
pci_init	pci.c	/^int32	pci_init(void)$/;"	f
pci_read_config_byte	pci.c	/^int pci_read_config_byte(uint32 encodedDev, int offset, unsigned char *value)$/;"	f
pci_read_config_dword	pci.c	/^int pci_read_config_dword(uint32 encodedDev, int offset, uint32 *value)$/;"	f
pci_read_config_word	pci.c	/^int pci_read_config_word(uint32 encodedDev, int offset, unsigned short *value)$/;"	f
pci_write_config_byte	pci.c	/^int pci_write_config_byte(uint32 encodedDev, int offset, unsigned char value)$/;"	f
pci_write_config_dword	pci.c	/^int pci_write_config_dword(uint32 encodedDev, int offset, uint32 value)$/;"	f
pci_write_config_word	pci.c	/^int pci_write_config_word(uint32 encodedDev, int offset, unsigned short value)$/;"	f
platinit	platinit.c	/^void	platinit()$/;"	f
porttab	ptinit.c	/^struct	ptentry	porttab[NPORTS];	\/* Port table			*\/$/;"	v	typeref:struct:ptentry
prcount	initialize.c	/^int	prcount;		\/* Total number of live processes	*\/$/;"	v
preempt	clkinit.c	/^uint32	preempt;		\/* Preemption counter			*\/$/;"	v
prntsegaddr	prntsegaddr.c	/^void prntsegaddr(){$/;"	f
proctab	initialize.c	/^struct	procent	proctab[NPROC];	\/* Process table			*\/$/;"	v	typeref:struct:procent
prtprstate	printprstate.c	/^void prtprstate(pid32 pid){$/;"	f
ptcount	ptcount.c	/^int32	ptcount($/;"	f
ptcreate	ptcreate.c	/^syscall	ptcreate($/;"	f
ptdelete	ptdelete.c	/^syscall	ptdelete($/;"	f
ptfree	ptinit.c	/^struct	ptnode	*ptfree;		\/* List of free message nodes	*\/$/;"	v	typeref:struct:ptnode
ptinit	ptinit.c	/^syscall	ptinit($/;"	f
ptnextid	ptinit.c	/^int32	ptnextid;			\/* Next table entry to try	*\/$/;"	v
ptrecv	ptrecv.c	/^uint32	ptrecv($/;"	f
ptreset	ptreset.c	/^syscall	ptreset($/;"	f
ptsend	ptsend.c	/^syscall	ptsend($/;"	f
putc	putc.c	/^syscall	putc($/;"	f
quark_irq_routing	quark_irq.c	/^int32	quark_irq_routing(void)$/;"	f
queuetab	queue.c	/^struct qentry	queuetab[NQENT];	\/* Table of process queues	*\/$/;"	v	typeref:struct:qentry
read	read.c	/^syscall	read($/;"	f
ready	ready.c	/^status	ready($/;"	f
readylist	ready.c	/^qid16	readylist;			\/* Index of ready list		*\/$/;"	v
receive	receive.c	/^umsg32	receive(void)$/;"	f
recvclr	recvclr.c	/^umsg32	recvclr(void)$/;"	f
recvtime	recvtime.c	/^umsg32	recvtime($/;"	f
regAddress_MMConfig	pci.c	/^regAddress_MMConfig($/;"	f	file:
remove_irm_protections	early_imr.c	/^int remove_irm_protections(void)$/;"	f
resched	resched.c	/^void	resched(void)		\/* Assumes interrupts are disabled	*\/$/;"	f
resched_cntl	resched.c	/^status	resched_cntl(		\/* Assumes interrupts are disabled	*\/$/;"	f
restore	intr.S	/^restore:$/;"	l
resume	resume.c	/^pri16	resume($/;"	f
ret	host2netla.S	/^ret$/;"	l
roundew	create.c	7;"	d	file:
sb_pcidev	early_imr.c	/^static uint32 sb_pcidev;$/;"	v	file:
sbzero	start.S	/^sbzero:$/;"	l
sd	meminit.c	/^struct __attribute__ ((__packed__)) sd {$/;"	s	file:
sd_access	meminit.c	/^	unsigned char   sd_access;$/;"	m	struct:sd	file:
sd_hibase	meminit.c	/^	unsigned char	sd_hibase;$/;"	m	struct:sd	file:
sd_hilim_fl	meminit.c	/^	unsigned char	sd_hilim_fl;$/;"	m	struct:sd	file:
sd_lobase	meminit.c	/^	unsigned short	sd_lobase;$/;"	m	struct:sd	file:
sd_lolimit	meminit.c	/^	unsigned short	sd_lolimit;$/;"	m	struct:sd	file:
sd_midbase	meminit.c	/^	unsigned char	sd_midbase;$/;"	m	struct:sd	file:
seek	seek.c	/^syscall	seek($/;"	f
semcount	semcount.c	/^syscall semcount($/;"	f
semcreate	semcreate.c	/^sid32	semcreate($/;"	f
semdelete	semdelete.c	/^syscall	semdelete($/;"	f
semreset	semreset.c	/^syscall	semreset($/;"	f
semtab	initialize.c	/^struct	sentry	semtab[NSEM];	\/* Semaphore table			*\/$/;"	v	typeref:struct:sentry
send	send.c	/^syscall	send($/;"	f
set_evec	evec.c	/^int32	set_evec(uint32 xnum, uint32 handler)$/;"	f
setirmask	evec.c	/^void	setirmask(void)$/;"	f
setsegs	meminit.c	/^void	setsegs()$/;"	f
signal	signal.c	/^syscall	signal($/;"	f
signaln	signaln.c	/^syscall	signaln($/;"	f
sleep	sleep.c	/^syscall	sleep($/;"	f
sleepms	sleep.c	/^syscall	sleepms($/;"	f
sleepq	clkinit.c	/^qid16	sleepq;			\/* Queue of sleeping processes		*\/$/;"	v
spurious_irq15	intr.S	/^spurious_irq15:$/;"	l
spurious_irq7	intr.S	/^spurious_irq7:$/;"	l
stacktrace	stacktrace.c	/^syscall stacktrace(int pid)$/;"	f
start	start.S	/^start:$/;"	l
stop	initialize.c	/^int32	stop(char *s)$/;"	f
suspend	suspend.c	/^syscall	suspend($/;"	f
sysinit	initialize.c	/^static	void	sysinit()$/;"	f	file:
trap	evec.c	/^void	trap ($/;"	f
unsleep	unsleep.c	/^status	unsleep($/;"	f
userret	userret.c	/^void	userret(void)$/;"	f
wait	wait.c	/^syscall	wait($/;"	f
wakeup	wakeup.c	/^void	wakeup(void)$/;"	f
write	write.c	/^syscall	write($/;"	f
xdone	xdone.c	/^void	xdone(void)$/;"	f
yield	yield.c	/^syscall	yield(void)$/;"	f
